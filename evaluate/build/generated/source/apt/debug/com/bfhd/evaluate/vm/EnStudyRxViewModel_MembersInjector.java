// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.bfhd.evaluate.vm;

import com.bfhd.evaluate.api.EnStudyService;
import com.docker.common.api.OpenService;
import com.docker.common.common.vm.NitCommonVm;
import com.docker.core.repository.CommonRepository;
import dagger.MembersInjector;
import javax.inject.Provider;

public final class EnStudyRxViewModel_MembersInjector
    implements MembersInjector<EnStudyRxViewModel> {
  private final Provider<CommonRepository> commonRepositoryProvider;

  private final Provider<OpenService> openServiceProvider;

  private final Provider<EnStudyService> commonServiceProvider;

  public EnStudyRxViewModel_MembersInjector(
      Provider<CommonRepository> commonRepositoryProvider,
      Provider<OpenService> openServiceProvider,
      Provider<EnStudyService> commonServiceProvider) {
    assert commonRepositoryProvider != null;
    this.commonRepositoryProvider = commonRepositoryProvider;
    assert openServiceProvider != null;
    this.openServiceProvider = openServiceProvider;
    assert commonServiceProvider != null;
    this.commonServiceProvider = commonServiceProvider;
  }

  public static MembersInjector<EnStudyRxViewModel> create(
      Provider<CommonRepository> commonRepositoryProvider,
      Provider<OpenService> openServiceProvider,
      Provider<EnStudyService> commonServiceProvider) {
    return new EnStudyRxViewModel_MembersInjector(
        commonRepositoryProvider, openServiceProvider, commonServiceProvider);
  }

  @Override
  public void injectMembers(EnStudyRxViewModel instance) {
    if (instance == null) {
      throw new NullPointerException("Cannot inject members into a null reference");
    }
    com.docker.common.common.vm.NitCommonVm_MembersInjector.injectCommonRepository(
        instance, commonRepositoryProvider);
    ((NitCommonVm) instance).openService = openServiceProvider.get();
    instance.commonService = commonServiceProvider.get();
  }

  public static void injectCommonService(
      EnStudyRxViewModel instance, Provider<EnStudyService> commonServiceProvider) {
    instance.commonService = commonServiceProvider.get();
  }
}
